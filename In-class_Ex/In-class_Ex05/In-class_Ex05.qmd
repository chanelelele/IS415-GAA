---
title: "In-class Exercise 5: Global and Local Measures of Spatial Autocorrelation"
execute: 
  warning: false
  freeze: true
date: "`r Sys.Date()`"
---

```{r}
pacman::p_load(sf, sfdep, tmap, tidyverse)
```

Importing datasets:

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
hunan <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")
GDPPC <- read_csv("data/aspatial/Hunan_GDPPC.csv")
```

When doing data join, open up the table and ensure that the field that you are using to join are able to match up accordingly.

```{r}
hunan_GDPPC <- left_join(hunan, hunan2012) %>%
  select(1:4, 7, 15)
```

:::

Note: Have to take note of which dataset is written first when joining as it would determine which part of the data is being kept in the new dataset.

```{r}
GDPPC_st <- spacetime(GDPPC, hunan,
                      .loc_col = "County",
                      .time_col = "Year")
```

Note: When tm_shape() is used, it already implies that it has to be spatial data. Only when using functions such as plot(), you need to explicitly write "geometry" to specify what you want to plot.

Deriving Contiguity weights: Queen's method

```{r}
wm_q <- hunan_GDPPC %>%
  mutate(nb = st_contiguity(geometry),
         wt = st_weights(nb,
                         style = 'W'),
         before =1)
```

Note: By default, use Queen's method. To change to root method, change to false.

```{r}
wm_q
```

```{r}
moranI <- global_moran(wm_q$GDPPC,
                       wm_q$nb,
                       wm_q$wt)
glimpse(moranI)
```

## Performing Global Moran'I Test

```{r}
global_moran_perm(wm_q$GDPPC,
                  wm_q$nb,
                  wm_q$wt,
                nsim = 99)
```

```{r}
is_spacetime_cube(GDPPC_st)
```

```{r}
GDPPC_nb <- GDPPC_st %>%
  activate("geometry") %>%
  mutate(nb = include_self(st_contiguity(geometry)),
         wt = st_inverse_distance(nb, geometry,
                                  scale = 1,
                                  alpha = 1),
         .before = 1) %>%
  set_nbs("nb") %>%
  set_wts("wt")
```

```{r}
gi_stars <- GDPPC_nb %>% 
  group_by(Year) %>% 
  mutate(gi_star = local_gstar_perm(
    GDPPC, nb, wt)) %>% 
  tidyr::unnest(gi_star)
```
