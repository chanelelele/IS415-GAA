---
title: "Take-home Exercise 3: Quake Quest - EDA + Spatial Autocorrelation of"
execute: 
  warning: false
date: "`r Sys.Date()`"
---

# Project Motivation

Given Indonesia’s geographical location along the Pacific Ring of Fire, the country experiences frequent and intense earthquakes. It lies in the intersections with three major tectonic plates: the Indo-Australian Plate, the Eurasian Plate, and the Pacific Plate. The constant interaction of these plates, along with the interaction with several other minor plates such as the Philippine Sea plate and the Caroline plate, amplifies the geological complexity of the region. This makes it crucial to examine the geospatial data related to seismic activity. We aim to also use this data to conduct further research to understand how geological features might relate to these events.

Earthquakes in Indonesia often strike in densely populated areas, causing many people to lose their homes, livelihoods and property. By leveraging spatial analysis techniques, we can provide insights that can inform proactive disaster management strategies, urban planning decisions and infrastructure resilience in Indonesia. Keeping well-informed is a good way to minimise negative impacts in the event of a seismic activity. 

Furthermore, earthquakes are often met with foreshocks and aftershocks of smaller magnitudes, which can be analysed to understand the spatial patterns and predict coming shocks. This includes identifying areas prone to high levels of seismic activity and implementing building codes and infrastructure improvements to reduce the impact of earthquakes on communities.

Performing such spatial analysis necessitates expertise in execution, including proficiency in data wrangling and cleaning to ensure accuracy. However, many users lack coding skills or familiarity with R packages, posing a challenge to understanding and conducting these analyses effectively. Consequently, developing an interactive application offers an accessible solution. Users can comprehend analysis findings and adjust parameters to suit their objectives without the lengthy execution processes.

# Project Objectives

-   Conducting Exploratory Data Analysis (EDA) provides users with contextual insights into the regions where frequent seismic activities occur.

-   Conduct spatial autocorrelation analysis

    -   Global and Local Moran’s I statistical test to examine the degree of similarity between observations in a dataset based on their spatial proximity

    -   Identify specific areas of significant spatial clustering (hotspots and cold spots)

<!-- -->

-   Spatio-temporal analysis to identify emerging hotspots

# Data Source

-   This [Earthquake dataset](https://github.com/kekavigi/repo-gempa) is taken from the Earthquake Repository managed by BMKG (an Indonesian non-departmental government agency). It contains earthquake event data from 1 Nov 2008 to 15 Dec 2023, but may not be accurate for some of the last earthquake events recorded. 

-   Indonesia’s Subnational Administrative Boundaries extracted from [HDX](https://data.humdata.org/dataset/cod-ab-idn?force_layout=desktop).

# Checking data

```{r}
pacman::p_load(sf, spdep, sfdep, tmap, tidyverse, plotly, Kendall)
```

# Importing Geospatial Data

```{r}
indonesia <- st_read(dsn = "data/geospatial/idn_adm_bps_20200401_shp", 
                 layer = "idn_admbnda_adm3_bps_20200401")
```

Extracting only West Java regions

```{r}
west_java <- indonesia[indonesia$ADM1_EN == "Jawa Barat", ]
```

```{r}
west_java <- st_transform(west_java, crs = 23830)
```

```{r}
plot(st_geometry(west_java))
```

```{r}
indo_earthquake <- read_csv("data/aspatial/katalog_gempa.csv")
```

```{r}
head(indo_earthquake)
```

```{r}
# Convert to sf object 
indoEarthq_sf <- st_as_sf(indo_earthquake, coords = c("lon", "lat"), crs = "+proj=longlat +datum=WGS84")  # Transform the geometry to EPSG:23830 
indoEarthq_sf <- st_transform(indoEarthq_sf, crs = "+init=EPSG:23830")
```

```{r}
indoEarthq_filter <- indoEarthq_sf %>%                 
filter(tgl >= as.Date("2009/01/01") & tgl <= as.Date("2023/12/31"))
```

```{r}
# Group by the 'remark' column and calculate the count of each type
remark_counts <- indoEarthq_filter %>%   group_by(remark) %>%   
  summarise(count = n())  
# View the resulting count of each type in the 'remark' column 
```

```{r}
# Sort the data frame by count in descending order and select the top 10 rows 
top_10_remark <- remark_counts %>%   
  arrange(desc(count)) %>%   
  head(10)  
# Plot a bar graph 
ggplot(top_10_remark, 
       aes(x = remark, y = count)) +   
       geom_bar(stat = "identity", fill = "skyblue") +
       labs(title = "Top 10 Region Eathquake Count", 
       x = "Region",     
       y = "Count") +
       theme_minimal() +   
       theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
plot(st_geometry(indoEarthq_sf))
```

```{r}
java_earthq <- st_intersection(indoEarthq_filter, west_java)
java_earthq
```

Point with Polygon Join: If west_java contains polygon geometries and java_earthq contains point geometries, and you perform a spatial join to find points within polygons, the resulting dataset will likely have polygon geometries. This is because the join operation will match points to polygons, resulting in the polygons being retained.

```{r}
java_eq_left <- st_join(west_java, java_earthq) %>%
  rename(ADM3_EN = ADM3_EN.x)
```

```{r}
tmap_mode('view')

# Define basemaps
osm_basemap <- tm_basemap(server = "OpenStreetMap.HOT")
imagery_basemap <- tm_basemap(server = "Esri.WorldImagery")

# Plot dl_class over OpenStreetMap basemap
eo_map <- osm_basemap +
  tm_shape(java_eq_left) +
  tm_markers(col = "red", size = 1) +  # Adjust marker color and size as needed
  tmap_options(check.and.fix = TRUE)

# View the map
eo_map
```

For the following EDA map, the user will be able to tailor their exploration by filtering seismic events based on specific geographical regions – provinces and city regions.

**Paramters to utilize the EDA map:**

1.  Province Selection:

-   Users can input the name of the province they wish to investigate into the designated text input field.
-   This province selection aligns with the geographical delineation provided in the "ADM2_EN" column of our dataset.

2.  City Region Specification:

-   For a more granular analysis, users can further refine their search by inputting the name of the city region they are interested in.

3.  Date Range:

-   In addition, users have the flexibility to specify the date range of their interest, allowing them to narrow down their analysis to seismic events occurring within a particular timeframe
-   The city region input corresponds to the localized districts recorded in the "ADM3_EN" column of our dataset.

**Navigating Filtered Earthquake Data:**

Upon entering the desired province and city region, the map dynamically updates to exclusively display seismic events recorded within the defined area and timeframe. Each marker on the map signifies the precise location of an earthquake event, providing users with a visual representation of seismic activity within their specified regions of interest.

```{r}
tmap_mode('plot')
tm_shape(west_java)+
  tm_polygons()+
  tm_shape(java_earthq)+
  tm_dots()
```

```{r}
java_earthq_count <- java_eq_left %>%
  group_by(ADM3_EN) %>%
  summarize(num_rows_in_group = n())
```

```{r}
# Plot choropleth map
tm_shape(java_earthq_count) +
  tm_polygons("num_rows_in_group", palette = "Blues", title = "Earthquake Count") +
  tm_layout(title = "Choropleth Map of Earthquake Count in West Java")
```

# Global Spatial Autocorrelation

Spatial autocorrelation is the term used to describe the presence of systematic spatial variation in a variable.

Hypotheses:

-   Null Hypothesis: The map suggests that the seismic activity in West Java occurred randomly over space. (complete spatial randomness)

-   Alternative Hypothesis: The map suggests that the seismic activity in West Java occurred in a non-random pattern over space (spatially clustered)

```{r}
wm_q <- java_earthq_count %>%
  mutate(nb = st_contiguity(geometry),
         wt = st_weights(nb,
                         style = "W"),
         .before = 1) 
```

The st_weights() function in the sf package is used to compute spatial weights for spatial analysis. It generates weights for spatial entities based on their relationships with neighboring entities.

-   **Paramters to generate the LISA map:** Here's an overview of the options available for the style parameter in st_weights():

-   **W (Row Standardized Weights):** This is the default option. It computes weights that are row standardized, meaning the sum of weights over all links connected to a particular spatial entity sums to the entity's row number (n).

-   **B (Basic Binary Coding):** This option generates basic binary weights where neighbors are assigned a weight of 1 if they share a boundary with the entity, and 0 otherwise.

-   **C (Globally Standardized Weights):** It computes weights that are globally standardized, meaning the sum of weights over all links sums to the total number of neighbors (n).

-   **U (Equal to C Divided by the Number of Neighbors):** This option is similar to C, but the weights are divided by the number of neighbors, resulting in a sum of weights over all links equal to unity. -

-   **minmax:** This option computes weights such that the maximum weight of any neighbor is set to 1, and all other weights are scaled accordingly.

-   **S (Variance-Stabilizing Coding Scheme):** This option applies a variance-stabilizing transformation to the weights, which can help stabilize variance and mitigate the impact of outliers in spatial analysis.

```{r}
wm_q
```

## Computing Global Moran I

```{r}
moranI <- global_moran(wm_q$num_rows_in_group,
                       wm_q$nb,
                       wm_q$wt)
glimpse(moranI)
```

## Performing Global Moran’sI test

```{r}
global_moran_test(wm_q$num_rows_in_group,
                       wm_q$nb,
                       wm_q$wt)
```

## Performing Global Moran’I permutation test

In practice, monte carlo simulation should be used to perform the statistical test. For sfdep, it is supported by globel_moran_perm() It is alway a good practice to use set.seed() before performing simulation. This is to ensure that the computation is reproducible.

```{r}
set.seed(1234)
```

```{r}
global_moran_perm(wm_q$num_rows_in_group,
                       wm_q$nb,
                       wm_q$wt,
                  nsim = 99)
```

## Computing local Moran’s I

```{r}
lisa <- wm_q %>% 
  mutate(local_moran = local_moran(
    num_rows_in_group, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)
```

## Visualising local Moran’s I

```{r}
tmap_mode("plot")
tm_shape(lisa) +
  tm_fill("ii") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "local Moran's I of sesismic activity",
            main.title.size = 0.8)
```

## Visualising p-value of local Moran’s I

```{r}
tmap_mode("plot")
tm_shape(lisa) +
  tm_fill("p_ii_sim") + 
  tm_borders(alpha = 0.5) +
   tm_layout(main.title = "p-value of local Moran's I",
            main.title.size = 0.8)
```

## Visuaising local Moran’s I and p-value

Added the variable midpoint=NA to map1 as the variable(s) "ii" contains positive and negative values, which causes midpoint to be set to 0. Therefore, I set midpoint to NA to show the full spectrum of the color palette.

```{r}
tmap_mode("plot")
map1 <- tm_shape(lisa) +
  tm_fill("ii", midpoint = NA) + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "local Moran's I of sesismic activity",
            main.title.size = 0.8)

map2 <- tm_shape(lisa) +
  tm_fill("p_ii",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of local Moran's I",
            main.title.size = 0.8)

tmap_arrange(map1, map2, ncol = 2)
```

Renaming the column from ADM3_EN to City Region:

```{r}
lisa <- lisa %>%
  rename(`City Region` = ADM3_EN)
```

```{r}
## added the tooltip

tmap_mode("plot")

map1 <- tm_shape(lisa) +
  tm_fill("ii", popup.vars = c("City Region"), midpoint = NA) + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "Local Moran's I of seismic activity",
            main.title.size = 0.8)
  
# Map 2: p-value of local Moran's I
map2 <- tm_shape(lisa) +
  tm_fill("p_ii",
          popup.vars = c("City Region"),
          breaks = c(0, 0.001, 0.01, 0.05, 1),
          labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of Local Moran's I",
            main.title.size = 0.8)

tmap_arrange(map1, map2, ncol = 2)
```

The added tooltip allows the user to hover over the sector and check the name of the region.

## Visualising LISA map

```{r}
# attempt 1

lisa_sig <- lisa  %>%
  filter(p_ii < 0.05)
tmap_mode("plot")
tm_shape(lisa) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(lisa_sig) +
  tm_fill("mean") + 
  tm_borders(alpha = 0.4)
```

```{r}
tmap_mode("plot")

map <- tm_shape(lisa) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
  tm_shape(lisa_sig) +
  tm_fill("mean", popup.vars = "City Region") + 
  tm_borders(alpha = 0.4)

map
```

The added tooltip allows the user to hover over the sector and check the name of the region.

The LISA map is an interpreted map by combining local Moran’s I of geographical areas and their respective p-values.

**Paramters to generate the LISA map:**

The fields contain the LISA categories:

-   **mean:** Represents the average value of the variable of interest (e.g., seismic activity) within the spatial neighborhood of each entity. It is computed as the mean value of the variable across neighboring entities.

-   **median:** Represents the median value of the variable within the spatial neighborhood of each entity. Unlike the mean, which is influenced by extreme values or outliers, the median provides a measure of central tendency that is less sensitive to outliers.

-   **PySAL:** Represents the local spatial autocorrelation statistic calculated using the PySAL library, which is a Python library for spatial analysis. This statistic measures the degree of spatial clustering or dispersion of the variable of interest within the spatial neighborhood of each entity. It indicates whether the local pattern is similar to the global pattern (positive spatial autocorrelation), dissimilar (negative spatial autocorrelation), or random (no spatial autocorrelation).

## Hot Spot and Cold Spot Area Analysis (HCSA)

HCSA uses spatial weights to identify locations of statistically significant hot spots and cold spots in an spatially weighted attribute that are in proximity to one another based on a calculated distance. The analysis groups features when similar high (hot) or low (cold) values are found in a cluster. The polygon features usually represent administration boundaries or a custom grid structure.

## Computing local Gi\* statistics

```{r}
# Assuming java_eq_left is an sf object with geometry column named "geometry"
java_earthq_count <- java_earthq_count %>%
  mutate(geometry_point = st_centroid(geometry))  # Convert polygon geometries to point geometries (centroids)
```

```{r}
wm_idw <- java_earthq_count %>%
  mutate(nb = st_contiguity(geometry),
         wts = st_inverse_distance(nb, geometry_point,
                                   scale = 1,
                                   alpha = 1),
         .before = 1)
```

**Parameters for Hot Spot and Cold Spot Area Analysis (HCSA):**

1.  **Scale**:

-   Scale parameter in the st_inverse_distance function that controls the scaling factor for the inverse distance weights.
-   Adjusting this parameter will impact the influence of distant neighbors on the computed weights.
-   Higher values of scale result in a more gradual decrease in weight with distance, while lower values give more weight to closer neighbors.

2.  **Alpha**:

-   The alpha parameter in the st_inverse_distance function controls how fast the weight decreases as distance increases.
-   A higher alpha value makes the weight decrease faster, while lower values make it decrease slower.

3.  **Number of Simulations (nsim)**:

-   In the local_gstar_perm function, the nsim parameter specifies the number of permutations to use for the Monte Carlo simulation.
-   Increasing nsim can lead to more accurate p-values. However, it also increases computation time.

By adjusting these parameters, users can tailor their exploration of hot spot and cold spot areas in the seismic data, allowing for a more nuanced analysis of spatial patterns and relationships.

```{r}
HCSA <- wm_idw %>% 
  mutate(local_Gi = local_gstar_perm(
    num_rows_in_group, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_Gi)
HCSA
```

```{r}
tmap_mode("plot")
tm_shape(HCSA) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8))
```

```{r}
tmap_mode("plot")
tm_shape(HCSA) +
  tm_fill("p_sim") + 
  tm_borders(alpha = 0.5)
```

```{r}
tmap_mode("plot")
map1 <- tm_shape(HCSA) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "Gi* of GDPPC",
            main.title.size = 0.8)

map2 <- tm_shape(HCSA) +
  tm_fill("p_value",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of Gi*",
            main.title.size = 0.8)

tmap_arrange(map1, map2, ncol = 2)
```

## Visualising hot spot and cold spot areas

```{r}
HCSA_sig <- HCSA %>%
  filter(p_sim < 0.05)

tmap_mode("plot")

map <- tm_shape(HCSA) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
  tm_shape(HCSA_sig) +
  tm_fill("gi_star", popup.vars = "ADM3_EN") + 
  tm_borders(alpha = 0.4)

map
```

The added tooltip allows the user to hover over the sector and check the name of the region.

```{r}
class(HCSA)
```

# Storyboard

![**Seismic Activity Map Layout**](images/Quake.png)

![**Global Moran’s I test Layout (Part 1)**](images/4.png)

![**Global Moran’s I test Layout (Part 2)**](images/5.png)

![**Hot/Cold Spots Layout**](images/6.png)
